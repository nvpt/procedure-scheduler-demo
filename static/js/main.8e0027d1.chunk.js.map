{"version":3,"sources":["store-global/reducers/PatientsReducer.tsx","mock/DoctorsMock.tsx","shared/top-panel/TopPanel.tsx","pages/doctors/Doctors.tsx","pages/patients/coponents/patient-modal/PatientModal.tsx","pages/patients/Patients.tsx","store-global/reducers/ProceduresReducer.tsx","Constants.tsx","pages/procedures/coponents/procedure-modal/ProcedureModal.tsx","mock/PatientsMock.tsx","mock/ProceduresMock.tsx","pages/procedures/Procedures.tsx","mock/RoomsMock.tsx","pages/rooms/Rooms.tsx","shared/header/Header.tsx","shared/footer/Footer.tsx","shared/side-menu/components/menu-item/SideMenuItem.tsx","shared/side-menu/components/menu-list/SideMenuList.tsx","shared/side-menu/SideMenu.tsx","pages/dashboard/Dashboard.tsx","App.tsx","serviceWorker.ts","store-global/RootReducer.tsx","store-global/StoreGlobal.tsx","index.tsx","app.module.css","shared/top-panel/topPanel.module.css","shared/header/header.module.css","shared/side-menu/components/menu-item/sideMenuItem.module.css","pages/dashboard/dashboard.module.css","pages/patients/patients.module.css","pages/procedures/procedures.module.css","shared/side-menu/components/menu-list/dideMenuList.module.css","pages/doctors/doctors.module.css","pages/patients/coponents/patient-modal/patient-modal.module.css","pages/procedures/coponents/procedure-modal/procedure-modal.module.css","pages/rooms/rooms.module.css","logo.png","shared/footer/footer.module.css","shared/side-menu/sideMenu.module.css"],"names":["initialState","patientsActions","patientReducer","state","action","type","patients","editedPatientId","findIndex","patient","Id","editedStateCopy","splice","filter","DoctorsList","Name","TopPanel","this","props","title","onAction","buttonLabel","className","cn","topPanel","panelContentWrap","buttonWrap","Button","block","variant","onClick","React","Component","Doctors","doctors","emptyPlaceholder","Table","striped","bordered","length","map","doctor","key","colSpan","PatientModal","modalTitle","formData","Sex","DayOfBirth","validated","event","optionName","target","value","setState","patientData","Object","keys","initFormData","show","saveAndHide","closeModal","handleClose","resetForm","Modal","onHide","animation","Form","noValidate","onSubmit","currentTarget","checkValidity","Number","Date","now","handleSave","preventDefault","stopPropagation","Header","closeButton","Title","Body","Group","controlId","Label","column","Control","required","placeholder","onChange","handleChangeOption","Feedback","onFocus","onBlur","Check","id","label","name","checked","isInvalid","feedback","Text","requiredNotation","join","Footer","Patients","showModal","currentPatientData","status","patientIsExist","onUpdatePatient","onAddPatient","assign","onDeletePatient","some","person","handleShowModal","hover","i","style","cursor","delete","handleDeletePatient","handleCloseModal","handleSaveAndHideModal","connect","storeGlobal","dispatch","proceduresActions","procedureReducer","procedures","editedProcedureId","procedure","MENU","HOME","LINK","LABEL","DOCTORS","PATIENTS","PROCEDURES","ROOMS","WORK_TIME","STATUSES","ProcedureModal","Patient","Description","Status","DateOfProcedure","PlannedStartTime","EstimatedEndTime","patientId","find","procedureData","as","handleChangePatient","rows","DropdownButton","Dropdown","Item","handleChangeStatus","disabled","min","max","PatientsList","ProceduresList","Procedures","currentProcedureData","getProcedures","procedureIsExist","onUpdateProcedure","onAddProcedure","onDeleteProcedure","onGetProcedures","checkedProcedure","handleDeleteProcedure","RoomsList","Rooms","rooms","header","logoWrap","src","logo","alt","width","height","footer","SideMenuItem","sideMenuItem","to","item","link","activeClassName","linkActive","exact","SideMenuList","sideMenuList","menuItem","SideMenu","sideMenu","Dashboard","dashboard","tiles","element","tile","App","menuIsOpen","getPatients","onGetPatients","app","menuButton","handleToggleMenu","menuButtonItem","sideMenuWrap","closeMenu","wrapper","container","content","path","component","Boolean","window","location","hostname","match","combineReducers","routing","routerReducer","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8e0027d1.chunk.js","sourcesContent":["import PatientInterface from '../../interfaces/PatientInterface'\r\n\r\ntype actionsTypes =\r\n    | 'GET_PATIENTS'\r\n    | 'ADD_PATIENT'\r\n    | 'DELETE_PATIENT'\r\n    | 'UPDATE_PATIENT'\r\n\r\ninterface actionInterface {\r\n    type: actionsTypes\r\n    patients: PatientInterface[]\r\n}\r\nconst initialState: PatientInterface[] = []\r\n\r\nexport const patientsActions: { [key: string]: actionsTypes } = {\r\n    GET_PATIENTS: 'GET_PATIENTS',\r\n    ADD_PATIENT: 'ADD_PATIENT',\r\n    UPDATE_PATIENT: 'UPDATE_PATIENT',\r\n    DELETE_PATIENT: 'DELETE_PATIENT',\r\n}\r\n\r\nconst patientReducer = (state = initialState, action: actionInterface) => {\r\n\r\n    switch (action.type) {\r\n        case 'GET_PATIENTS':\r\n            return [...action.patients]\r\n        case 'ADD_PATIENT':\r\n            return [...state, action.patients[0]]\r\n        case 'UPDATE_PATIENT':\r\n            const editedPatientId: number = [...state].findIndex(\r\n                (patient) => patient.Id === action.patients[0].Id,\r\n            )\r\n            const editedStateCopy = [...state]\r\n            editedStateCopy.splice(\r\n                editedPatientId,\r\n                1,\r\n                action.patients[0],\r\n            )\r\n            return editedStateCopy\r\n        case 'DELETE_PATIENT':\r\n            return [\r\n                ...state.filter(\r\n                    (patient) => patient.Id !== action.patients[0].Id,\r\n                ),\r\n            ]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default patientReducer\r\n","import DoctorInterface from \"../interfaces/DoctorInterface\";\r\n\r\nexport const DoctorsList: DoctorInterface[] = [\r\n    {\r\n        Id: 1,\r\n        Name: 'Gregory House'\r\n    },    {\r\n        Id: 2,\r\n        Name: 'Lisa Cuddy'\r\n    },    {\r\n        Id: 3,\r\n        Name: 'James Wilson'\r\n    },    {\r\n        Id: 4,\r\n        Name: 'Eric Foreman'\r\n    },    {\r\n        Id: 5,\r\n        Name: 'Robert Chase'\r\n    },    {\r\n        Id: 6,\r\n        Name: 'Allison Cameron'\r\n    },\r\n];\r\n","import React from 'react'\r\nimport cn from './topPanel.module.css'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\ninterface TopPanelProps {\r\n    title?: string\r\n    buttonLabel?: string\r\n    onAction?: () => void\r\n}\r\ninterface TopPanelState {}\r\n\r\nexport default class TopPanel extends React.Component<\r\n    TopPanelProps,\r\n    TopPanelState\r\n> {\r\n    state = {}\r\n\r\n    render() {\r\n        const { title, onAction, buttonLabel = '' } = this.props\r\n\r\n        return (\r\n            <div className={cn.topPanel}>\r\n                <div className={cn.panelContentWrap}>\r\n                    <h2 className={cn.title}>{title}</h2>\r\n                </div>\r\n                {onAction ? (\r\n                    <div className={cn.panelContentWrap}>\r\n                        <div className={cn.buttonWrap}>\r\n                            <Button\r\n                                block\r\n                                variant='outline-primary'\r\n                                onClick={onAction}>\r\n                                {`Add ${buttonLabel}`}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport cn from './doctors.module.css'\r\nimport { DoctorsList } from '../../mock/DoctorsMock'\r\nimport DoctorInterface from '../../interfaces/DoctorInterface'\r\nimport { Table } from 'react-bootstrap'\r\nimport TopPanel from '../../shared/top-panel/TopPanel'\r\n\r\ninterface DoctorsProps {}\r\ninterface DoctorsState {\r\n    doctors: Array<DoctorInterface>\r\n    emptyPlaceholder: string\r\n}\r\n\r\nexport default class Doctors extends React.Component<\r\n    DoctorsProps,\r\n    DoctorsState\r\n> {\r\n    state: DoctorsState = {\r\n        doctors: DoctorsList,\r\n        emptyPlaceholder: 'No Doctors.',\r\n    }\r\n    render() {\r\n        const { doctors, emptyPlaceholder } = this.state\r\n\r\n        return (\r\n            <div className={cn.doctors}>\r\n                <TopPanel title={'Doctors'} />\r\n                <Table striped bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Name</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {doctors && doctors.length ? (\r\n                        <tbody>\r\n                            {doctors.map((doctor) => {\r\n                                return (\r\n                                    <tr key={doctor.Id}>\r\n                                        <td>{doctor.Id}</td>\r\n                                        <td>{doctor.Name}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    ) : (\r\n                        <tbody>\r\n                            <tr>\r\n                                <td colSpan={2}>{emptyPlaceholder}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    )}\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport cn from './patient-modal.module.css'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport PatientInterface from '../../../../interfaces/PatientInterface'\r\n\r\ntype optionName = 'Name' | 'Sex' | 'DayOfBirth' // according to PatientInterface keys\r\n\r\ninterface PropsAddPatients {\r\n    show: boolean\r\n    patientData: PatientInterface\r\n    saveAndHide: (status: boolean, patientData: PatientInterface) => void\r\n    closeModal: () => void\r\n}\r\n\r\ninterface StateAddPatients {\r\n    modalTitle: string\r\n    formData: PatientInterface\r\n    validated: boolean\r\n}\r\n\r\nexport default class PatientModal extends React.Component<\r\n    PropsAddPatients,\r\n    StateAddPatients\r\n> {\r\n    state = {\r\n        modalTitle: 'Add Patient',\r\n        formData: {\r\n            Id: 0,\r\n            Name: '',\r\n            Sex: null,\r\n            DayOfBirth: '',\r\n        } as PatientInterface,\r\n        validated: false,\r\n    }\r\n\r\n    handleChangeOption(event: any, optionName: optionName) {\r\n        const formData = { ...this.state.formData }\r\n        formData[optionName] = event.target.value\r\n        this.setState({ formData })\r\n    }\r\n\r\n    resetForm() {\r\n        const resetForm: PatientInterface = {\r\n            Id: 0,\r\n            Name: '',\r\n        }\r\n        this.setState({\r\n            formData: resetForm,\r\n        })\r\n    }\r\n\r\n    initFormData() {\r\n        if (\r\n            this.props.patientData &&\r\n            Object.keys(this.props.patientData).length\r\n        ) {\r\n            this.setState({\r\n                formData: { ...this.props.patientData },\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.initFormData()\r\n    }\r\n\r\n    render() {\r\n        const { modalTitle, validated } = this.state\r\n        const { show, saveAndHide, closeModal } = this.props\r\n\r\n        const handleSave = () => {\r\n            const formData = this.state.formData\r\n            formData.Id =\r\n                formData.Id && formData.Id !== 0\r\n                    ? formData.Id\r\n                    : Number(Date.now())\r\n            saveAndHide(false, { ...this.state.formData })\r\n            this.resetForm()\r\n        }\r\n\r\n        const handleClose = () => {\r\n            closeModal()\r\n            this.resetForm()\r\n        }\r\n\r\n        const handleSubmit = (event: any) => {\r\n            this.setState({ validated: true })\r\n            const form = event.currentTarget\r\n            const isValid = form.checkValidity()\r\n            if (isValid) {\r\n                handleSave()\r\n            } else {\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Modal show={show} onHide={handleClose} animation={true}>\r\n                <Form\r\n                    className={validated ? 'was-validated' : ''}\r\n                    noValidate\r\n                    onSubmit={handleSubmit}\r\n                    validated={validated}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>{modalTitle}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {/*NAME*/}\r\n                        <Form.Group controlId='FormName'>\r\n                            <Form.Label column={false}>Name*</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                required\r\n                                placeholder='Enter the Name'\r\n                                value={this.state.formData.Name}\r\n                                onChange={(event: any) => {\r\n                                    this.handleChangeOption(event, 'Name')\r\n                                }}\r\n                            />\r\n                            <Form.Control.Feedback type={'invalid'}>\r\n                                Field is required\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        {/*END: NAME*/}\r\n                        {/*DAY OF BIRTH*/}\r\n                        <Form.Group controlId='FormDayOfBirth'>\r\n                            <Form.Label column={false}>\r\n                                Day of Birth*\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                required\r\n                                onFocus={(event: any) => {\r\n                                    event.target.type = 'date'\r\n                                }}\r\n                                onBlur={(event: any): void => {\r\n                                    if (!event.target.value)\r\n                                        event.target.type = 'text'\r\n                                }}\r\n                                placeholder='Enter the Day of Birth'\r\n                                value={\r\n                                    this.state.formData.DayOfBirth\r\n                                        ? this.state.formData.DayOfBirth\r\n                                        : ''\r\n                                }\r\n                                onChange={(event: any) => {\r\n                                    this.handleChangeOption(event, 'DayOfBirth')\r\n                                }}\r\n                            />\r\n                            <Form.Control.Feedback type={'invalid'}>\r\n                                Field is required\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        {/*END: DAY OF BIRTH*/}\r\n                        {/*SEX*/}\r\n                        <Form.Group controlId='FormSex'>\r\n                            <Form.Label column={false}>Sex*</Form.Label>\r\n                            <Form.Check\r\n                                type='radio'\r\n                                id='Male'\r\n                                label='Male'\r\n                                name='Sex'\r\n                                required\r\n                                checked={\r\n                                    (this.state.formData.Sex as string) ===\r\n                                    'Male'\r\n                                }\r\n                                value={'Male'}\r\n                                isInvalid={\r\n                                    validated && !this.state.formData.Sex\r\n                                }\r\n                                onChange={(event: any) => {\r\n                                    this.handleChangeOption(event, 'Sex')\r\n                                }}\r\n                            />\r\n                            <Form.Check\r\n                                type='radio'\r\n                                id='Female'\r\n                                label='Female'\r\n                                name='Sex'\r\n                                required\r\n                                checked={\r\n                                    (this.state.formData.Sex as string) ===\r\n                                    'Female'\r\n                                }\r\n                                value={'Female'}\r\n                                isInvalid={\r\n                                    validated && !this.state.formData.Sex\r\n                                }\r\n                                feedback='Field is required'\r\n                                onChange={(event: any) => {\r\n                                    this.handleChangeOption(event, 'Sex')\r\n                                }}\r\n                            />\r\n                            <Form.Text\r\n                                className={[\r\n                                    'text-muted',\r\n                                    cn.requiredNotation,\r\n                                ].join(' ')}>\r\n                                * - required fields\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        {/*END: SEX*/}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant='secondary' onClick={handleClose}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant='primary' type={'submit'}>\r\n                            Save Changes\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Table } from 'react-bootstrap'\r\n\r\nimport { patientsActions } from '../../store-global/reducers/PatientsReducer'\r\n\r\nimport cn from './patients.module.css'\r\n\r\nimport TopPanel from '../../shared/top-panel/TopPanel'\r\nimport PatientModal from './coponents/patient-modal/PatientModal'\r\nimport PatientInterface from '../../interfaces/PatientInterface'\r\n\r\ninterface PropsPatients {\r\n    patients: PatientInterface[]\r\n    onAddPatient: (patients: PatientInterface[]) => void\r\n    onUpdatePatient: (patients: PatientInterface[]) => void\r\n    onDeletePatient: (patients: PatientInterface[]) => void\r\n}\r\ninterface StatePatients {\r\n    emptyPlaceholder: string\r\n    showModal: boolean\r\n    currentPatientData: PatientInterface\r\n}\r\n\r\nclass Patients extends React.Component<PropsPatients, StatePatients> {\r\n    constructor(props: PropsPatients) {\r\n        super(props)\r\n        this.state = {\r\n            emptyPlaceholder: 'No patients.',\r\n            showModal: false,\r\n            currentPatientData: {} as PatientInterface,\r\n        }\r\n    }\r\n\r\n    handleSaveAndHideModal(\r\n        status: boolean = false,\r\n        currentPatientData: PatientInterface = {} as PatientInterface,\r\n    ) {\r\n        if (this.patientIsExist(currentPatientData)) {\r\n            this.props.onUpdatePatient([currentPatientData])\r\n        } else {\r\n            this.props.onAddPatient([currentPatientData])\r\n        }\r\n        this.setState({\r\n            showModal: status,\r\n            currentPatientData: {} as PatientInterface,\r\n        })\r\n    }\r\n\r\n    handleShowModal(\r\n        status: boolean = false,\r\n        patient: PatientInterface = {} as PatientInterface,\r\n    ) {\r\n        if (patient && Object.keys(patient).length) {\r\n            this.setState({\r\n                currentPatientData: Object.assign(\r\n                    this.state.currentPatientData,\r\n                    patient,\r\n                ),\r\n            })\r\n        } else {\r\n            this.setState({\r\n                currentPatientData: {} as PatientInterface,\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            showModal: status,\r\n        })\r\n    }\r\n\r\n    handleCloseModal() {\r\n        this.setState({\r\n            showModal: false,\r\n        })\r\n    }\r\n\r\n    handleDeletePatient(event: any, patient: PatientInterface) {\r\n        event.stopPropagation()\r\n        this.props.onDeletePatient([patient])\r\n    }\r\n\r\n    patientIsExist(patient: PatientInterface) {\r\n        return this.props.patients.some(\r\n            (person: PatientInterface) => person.Id === patient.Id,\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { emptyPlaceholder, showModal, currentPatientData } = this.state\r\n        const { patients } = this.props\r\n\r\n        return (\r\n            <div className={cn.patients}>\r\n                <TopPanel\r\n                    title={'Patients'}\r\n                    buttonLabel={'Patient'}\r\n                    onAction={() => {\r\n                        this.handleShowModal(true)\r\n                    }}\r\n                />\r\n\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Name</th>\r\n                            <th>Sex</th>\r\n                            <th>Day of Birth</th>\r\n                            <th> </th>\r\n                        </tr>\r\n                    </thead>\r\n                    {patients && patients.length ? (\r\n                        <tbody>\r\n                            {patients.map((patient, i) => {\r\n                                return (\r\n                                    <tr\r\n                                        key={i}\r\n                                        style={{ cursor: 'pointer' }}\r\n                                        onClick={() => {\r\n                                            this.handleShowModal(true, patient)\r\n                                        }}>\r\n                                        <td>{patient.Id}</td>\r\n                                        <td>{patient.Name}</td>\r\n                                        <td>{patient.Sex}</td>\r\n                                        <td>{patient.DayOfBirth}</td>\r\n                                        <td\r\n                                            className={cn.delete}\r\n                                            onClick={(event) => {\r\n                                                this.handleDeletePatient(\r\n                                                    event,\r\n                                                    patient,\r\n                                                )\r\n                                            }}>\r\n                                            x\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    ) : (\r\n                        <tbody>\r\n                            <tr>\r\n                                <td colSpan={5}>{emptyPlaceholder}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    )}\r\n                </Table>\r\n\r\n                {this.state.showModal ? (\r\n                    <PatientModal\r\n                        show={showModal}\r\n                        patientData={currentPatientData}\r\n                        closeModal={() => {\r\n                            this.handleCloseModal()\r\n                        }}\r\n                        saveAndHide={(showModal, currentPatientData) => {\r\n                            this.handleSaveAndHideModal(\r\n                                showModal,\r\n                                currentPatientData,\r\n                            )\r\n                        }}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (storeGlobal: any) => {\r\n        return { patients: storeGlobal.patients }\r\n    },\r\n    (dispatch) => ({\r\n        onAddPatient: (patients: PatientInterface[]) => {\r\n            dispatch({ type: patientsActions.ADD_PATIENT, patients })\r\n        },\r\n        onUpdatePatient: (patients: PatientInterface[]) => {\r\n            dispatch({ type: patientsActions.UPDATE_PATIENT, patients })\r\n        },\r\n        onDeletePatient: (patients: PatientInterface[]) => {\r\n            dispatch({ type: patientsActions.DELETE_PATIENT, patients })\r\n        },\r\n    }),\r\n)(Patients)\r\n","import ProcedureInterface from '../../interfaces/ProcedureInterface'\r\n\r\n\r\ntype actionsTypes =\r\n    | 'GET_PROCEDURES'\r\n    | 'ADD_PROCEDURE'\r\n    | 'DELETE_PROCEDURE'\r\n    | 'UPDATE_PROCEDURE'\r\n\r\ninterface actionInterface {\r\n    type: actionsTypes\r\n    procedures: ProcedureInterface[]\r\n}\r\nconst initialState: ProcedureInterface[] = []\r\n\r\nexport const proceduresActions: { [key: string]: actionsTypes } = {\r\n    GET_PROCEDURES: 'GET_PROCEDURES',\r\n    ADD_PROCEDURE: 'ADD_PROCEDURE',\r\n    UPDATE_PROCEDURE: 'UPDATE_PROCEDURE',\r\n    DELETE_PROCEDURE: 'DELETE_PROCEDURE',\r\n}\r\n\r\nconst procedureReducer = (state = initialState, action: actionInterface) => {\r\n\r\n    switch (action.type) {\r\n        case 'GET_PROCEDURES':\r\n            return [...action.procedures]\r\n        case 'ADD_PROCEDURE':\r\n            return [...state, action.procedures[0]]\r\n        case 'UPDATE_PROCEDURE':\r\n            const editedProcedureId: number = [...state].findIndex(\r\n                (procedure) => procedure.Id === action.procedures[0].Id,\r\n            )\r\n            const editedStateCopy = [...state]\r\n            editedStateCopy.splice(\r\n                editedProcedureId,\r\n                1,\r\n                action.procedures[0],\r\n            )\r\n            return editedStateCopy\r\n        case 'DELETE_PROCEDURE':\r\n            return [\r\n                ...state.filter(\r\n                    (procedure) => procedure.Id !== action.procedures[0].Id,\r\n                ),\r\n            ]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default procedureReducer\r\n","import MenuItemInterface from './interfaces/MenuItemInterface'\r\n\r\nexport const MENU: { [key: string]: MenuItemInterface } = {\r\n    HOME: {\r\n        LINK: '/',\r\n        LABEL: 'Home',\r\n    },\r\n    DOCTORS: {\r\n        LINK: '/doctors',\r\n        LABEL: 'Doctors',\r\n    },\r\n    PATIENTS: {\r\n        LINK: '/patients',\r\n        LABEL: 'Patients',\r\n    },\r\n    PROCEDURES: {\r\n        LINK: '/procedures',\r\n        LABEL: 'Procedures',\r\n    },\r\n    ROOMS: {\r\n        LINK: '/rooms',\r\n        LABEL: 'Rooms',\r\n    },\r\n}\r\n\r\nexport const WORK_TIME = {\r\n    MIN: \"9:00\",\r\n    MAX: \"20:00\"\r\n}\r\n\r\n","import React from 'react'\r\nimport cn from './procedure-modal.module.css'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ProcedureInterface, {\r\n    statusType,\r\n} from '../../../../interfaces/ProcedureInterface'\r\nimport Form from 'react-bootstrap/Form'\r\nimport PatientInterface from '../../../../interfaces/PatientInterface'\r\nimport { WORK_TIME } from '../../../../Constants'\r\n\r\ntype optionName =\r\n    | 'Patient'\r\n    | 'Description'\r\n    | 'Status'\r\n    | 'DateOfProcedure'\r\n    | 'PlannedStartTime'\r\n    | 'EstimatedEndTime' // according to ProcedureInterface keys\r\n\r\nconst STATUSES: statusType[] = ['Planned', 'In Progress', 'Finished']\r\n\r\ninterface AddProceduresProps {\r\n    show: boolean\r\n    procedureData: ProcedureInterface\r\n    patients: PatientInterface[]\r\n    saveAndHide: (status: boolean, procedureData: ProcedureInterface) => void\r\n    closeModal: () => void\r\n}\r\n\r\ninterface AddProceduresState {\r\n    modalTitle: string\r\n    formData: ProcedureInterface\r\n    validated: boolean\r\n}\r\n\r\nexport default class ProcedureModal extends React.Component<\r\n    AddProceduresProps,\r\n    AddProceduresState\r\n> {\r\n    state = {\r\n        modalTitle: 'Add Procedure',\r\n        formData: {\r\n            Id: 0,\r\n            Patient: {} as PatientInterface,\r\n            Description: '',\r\n            Status: 'Planned',\r\n            DateOfProcedure: '',\r\n            PlannedStartTime: '',\r\n            EstimatedEndTime: '',\r\n        } as ProcedureInterface,\r\n        validated: false,\r\n    }\r\n\r\n    handleChangeOption(event: any, optionName: optionName) {\r\n        const formData = { ...this.state.formData }\r\n        formData[optionName] = event.target.value\r\n        this.setState({ formData })\r\n    }\r\n\r\n    handleChangePatient(patientId: string) {\r\n        const formData = { ...this.state.formData }\r\n        formData.Patient = this.props.patients.find(\r\n            (patient) => patient.Id === Number(patientId),\r\n        ) as PatientInterface\r\n        this.setState({\r\n            formData: Object.assign(this.state.formData, formData),\r\n        })\r\n    }\r\n\r\n    handleChangeStatus(status: statusType) {\r\n        const formData = { ...this.state.formData }\r\n        formData.Status = status\r\n        this.setState({ formData })\r\n    }\r\n\r\n    resetForm() {\r\n        const resetForm: ProcedureInterface = {} as ProcedureInterface\r\n\r\n        this.setState({\r\n            formData: resetForm,\r\n        })\r\n    }\r\n\r\n    initFormData() {\r\n        if (\r\n            this.props.procedureData &&\r\n            Object.keys(this.props.procedureData).length\r\n        ) {\r\n            this.setState({\r\n                formData: Object.assign(\r\n                    this.state.formData,\r\n                    this.props.procedureData,\r\n                ),\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.initFormData()\r\n    }\r\n\r\n    render() {\r\n        const { modalTitle, validated, formData } = this.state\r\n        const { show, saveAndHide, closeModal, patients } = this.props\r\n        const handleSave = () => {\r\n            // const formData = this.state.formData\r\n            formData.Id =\r\n                formData.Id && formData.Id !== 0\r\n                    ? formData.Id\r\n                    : Number(Date.now())\r\n            saveAndHide(false, { ...formData })\r\n            this.resetForm()\r\n        }\r\n        const handleClose = () => {\r\n            closeModal()\r\n            this.resetForm()\r\n        }\r\n\r\n        const handleSubmit = (event: any) => {\r\n            this.setState({ validated: true })\r\n            const form = event.currentTarget\r\n            const isValid = form.checkValidity()\r\n            if (isValid) {\r\n                handleSave()\r\n            } else {\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Modal show={show} onHide={handleClose} animation={true}>\r\n                    <Form\r\n                        className={validated ? 'was-validated' : ''}\r\n                        noValidate\r\n                        onSubmit={handleSubmit}\r\n                        validated={validated}>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>{modalTitle}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            {/*PATIENT*/}\r\n                            <Form.Group controlId='Patient'>\r\n                                <Form.Label column={false}>Patient*</Form.Label>\r\n                                <Form.Control\r\n                                    as='select'\r\n                                    required\r\n                                    isInvalid={validated && !formData.Patient}\r\n                                    onChange={(event: any) => {\r\n                                        this.handleChangePatient(\r\n                                            event.target.value,\r\n                                        )\r\n                                    }}>\r\n                                    <option>\r\n                                        {formData.Patient && formData.Patient.Id\r\n                                            ? formData.Patient.Name\r\n                                            : ''}\r\n                                    </option>\r\n                                    {formData.Patient && formData.Patient.Id\r\n                                        ? patients\r\n                                              .filter(\r\n                                                  (patient) =>\r\n                                                      patient.Id !==\r\n                                                      formData.Patient.Id,\r\n                                              )\r\n                                              .map(\r\n                                                  (\r\n                                                      patient: PatientInterface,\r\n                                                  ) => {\r\n                                                      return (\r\n                                                          <option\r\n                                                              key={patient.Id}\r\n                                                              label={\r\n                                                                  patient.Name\r\n                                                              }>\r\n                                                              {patient.Id}\r\n                                                          </option>\r\n                                                      )\r\n                                                  },\r\n                                              )\r\n                                        : patients.map(\r\n                                              (patient: PatientInterface) => {\r\n                                                  return (\r\n                                                      <option\r\n                                                          key={patient.Id}\r\n                                                          label={patient.Name}>\r\n                                                          {patient.Id}\r\n                                                      </option>\r\n                                                  )\r\n                                              },\r\n                                          )}\r\n                                </Form.Control>\r\n                                <Form.Control.Feedback type={'invalid'}>\r\n                                    Field is required\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            {/*END: PATIENT*/}\r\n                            {/*DESCRIPTION*/}\r\n                            <Form.Group controlId='Description'>\r\n                                <Form.Label column={false}>\r\n                                    Description*\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    as='textarea'\r\n                                    required\r\n                                    isInvalid={\r\n                                        validated && !formData.Description\r\n                                    }\r\n                                    rows='3'\r\n                                    value={\r\n                                        this.state.formData.Description\r\n                                            ? this.state.formData.Description\r\n                                            : ''\r\n                                    }\r\n                                    placeholder={'Enter Description'}\r\n                                    onChange={(event: any) => {\r\n                                        this.handleChangeOption(\r\n                                            event,\r\n                                            'Description',\r\n                                        )\r\n                                    }}\r\n                                />\r\n                                <Form.Control.Feedback type={'invalid'}>\r\n                                    Field is required\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            {/*END: DESCRIPTION*/}\r\n                            {/*STATUS*/}\r\n                            <Form.Group controlId='Status'>\r\n                                <Form.Label column={false}>Status*</Form.Label>\r\n                                <DropdownButton\r\n                                    id='Status'\r\n                                    variant={\r\n                                        this.state.formData.Status === 'Planned'\r\n                                            ? 'primary'\r\n                                            : this.state.formData.Status ===\r\n                                              'In Progress'\r\n                                            ? 'success'\r\n                                            : this.state.formData.Status ===\r\n                                              'Finished'\r\n                                            ? 'secondary'\r\n                                            : 'primary'\r\n                                    }\r\n                                    title={this.state.formData.Status}>\r\n                                    {STATUSES.map((status: statusType, i) => {\r\n                                        return (\r\n                                            <Dropdown.Item\r\n                                                key={i}\r\n                                                onClick={() => {\r\n                                                    this.handleChangeStatus(\r\n                                                        status,\r\n                                                    )\r\n                                                }}>\r\n                                                {status}\r\n                                            </Dropdown.Item>\r\n                                        )\r\n                                    })}\r\n                                </DropdownButton>\r\n                            </Form.Group>\r\n                            {/*END: STATUS*/}\r\n                            {/*DATE*/}\r\n                            <Form.Group controlId='DateOfProcedure'>\r\n                                <Form.Label column={false}>\r\n                                    Date\r\n                                    {formData.Status !== 'Finished' ? '*' : ''}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type='text'\r\n                                    required={formData.Status !== 'Finished'}\r\n                                    disabled={formData.Status === 'Finished'}\r\n                                    onFocus={(event: any) => {\r\n                                        event.target.type = 'date'\r\n                                    }}\r\n                                    onBlur={(event: any): void => {\r\n                                        if (!event.target.value)\r\n                                            event.target.type = 'text'\r\n                                    }}\r\n                                    placeholder='Date of Procedure'\r\n                                    value={\r\n                                        this.state.formData.DateOfProcedure\r\n                                            ? this.state.formData\r\n                                                  .DateOfProcedure\r\n                                            : ''\r\n                                    }\r\n                                    onChange={(event: any) => {\r\n                                        this.handleChangeOption(\r\n                                            event,\r\n                                            'DateOfProcedure',\r\n                                        )\r\n                                    }}\r\n                                />\r\n                                <Form.Control.Feedback type={'invalid'}>\r\n                                    Field is required\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            {/*END: DATE*/}\r\n                            {/*START TIME*/}\r\n                            <Form.Group controlId='StartTimeOfProcedure'>\r\n                                <Form.Label column={false}>\r\n                                    Planned Start Time\r\n                                    {formData.Status !== 'Finished' ? '*' : ''}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type={'time'}\r\n                                    name={'time'}\r\n                                    required={formData.Status !== 'Finished'}\r\n                                    disabled={formData.Status === 'Finished'}\r\n                                    min={WORK_TIME.MIN}\r\n                                    max={WORK_TIME.MAX}\r\n                                    value={this.state.formData.PlannedStartTime}\r\n                                    onChange={(event: any) => {\r\n                                        this.handleChangeOption(\r\n                                            event,\r\n                                            'PlannedStartTime',\r\n                                        )\r\n                                    }}\r\n                                />\r\n                                <Form.Control.Feedback type={'invalid'}>\r\n                                    Field is required\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            {/*END: START TIME*/}\r\n                            {/*END TIME*/}\r\n                            <Form.Group controlId='EndTimeOfProcedure'>\r\n                                <Form.Label column={false}>\r\n                                    Estimated End Time\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type={'time'}\r\n                                    name={'time'}\r\n                                    disabled={formData.Status === 'Finished'}\r\n                                    min={WORK_TIME.MIN}\r\n                                    max={WORK_TIME.MAX}\r\n                                    value={this.state.formData.EstimatedEndTime}\r\n                                    onChange={(event: any) => {\r\n                                        this.handleChangeOption(\r\n                                            event,\r\n                                            'EstimatedEndTime',\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n                            {/*END: END TIME*/}\r\n                            <Form.Text\r\n                                className={[\r\n                                    'text-muted',\r\n                                    cn.requiredNotation,\r\n                                ].join(' ')}>\r\n                                * - required fields\r\n                            </Form.Text>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant='secondary' onClick={handleClose}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button variant='primary' type={'submit'}>\r\n                                Save Changes\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import PatientInterface from \"../interfaces/PatientInterface\";\r\n\r\nexport const PatientsList: PatientInterface[] = [\r\n    {\r\n        Id: 1,\r\n        Name: \"John Doe\",\r\n        Sex: \"Male\",\r\n        DayOfBirth: \"1999-12-30\"\r\n    },\r\n    {\r\n        Id: 2,\r\n        Name: \"Rita Smith\",\r\n        Sex: \"Female\",\r\n        DayOfBirth: \"1975-09-20\"\r\n    },\r\n    {\r\n        Id: 3,\r\n        Name: \"Daniel Natan\",\r\n        Sex: \"Male\",\r\n        DayOfBirth: \"1980-03-17\"\r\n    },\r\n];\r\n","import ProcedureInterface from '../interfaces/ProcedureInterface'\r\n\r\nimport { PatientsList } from './PatientsMock'\r\n\r\nexport const ProceduresList: ProcedureInterface[] = [\r\n    {\r\n        Id: 1,\r\n        Patient: PatientsList[0],\r\n        Description: 'The conduct of radiation imaging of the femur',\r\n        Status: 'Planned',\r\n        DateOfProcedure:'2019-10-16',\r\n        PlannedStartTime: '11:20',\r\n        EstimatedEndTime: '12:10',\r\n    },\r\n    {\r\n        Id: 2,\r\n        Patient: PatientsList[1],\r\n        Description:\r\n            'Electrophoresis and massage treatments of the cervical spine',\r\n        Status: 'In Progress',\r\n        DateOfProcedure:'2019-15-16',\r\n        PlannedStartTime: '16:10',\r\n        EstimatedEndTime: '16:30',\r\n    },\r\n]\r\n","import React from 'react'\r\nimport { Table } from 'react-bootstrap'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { proceduresActions } from '../../store-global/reducers/ProceduresReducer'\r\nimport { patientsActions } from '../../store-global/reducers/PatientsReducer'\r\n\r\nimport cn from './procedures.module.css'\r\n\r\nimport TopPanel from '../../shared/top-panel/TopPanel'\r\nimport ProcedureModal from './coponents/procedure-modal/ProcedureModal'\r\n\r\nimport ProcedureInterface from '../../interfaces/ProcedureInterface'\r\nimport PatientInterface from '../../interfaces/PatientInterface'\r\nimport { ProceduresList } from '../../mock/ProceduresMock'\r\nimport { PatientsList } from '../../mock/PatientsMock'\r\n\r\ninterface ProceduresProps {\r\n    procedures: ProcedureInterface[]\r\n    patients: PatientInterface[]\r\n    onGetProcedures: (procedures: ProcedureInterface[]) => void\r\n    onAddProcedure: (procedures: ProcedureInterface[]) => void\r\n    onUpdateProcedure: (procedures: ProcedureInterface[]) => void\r\n    onDeleteProcedure: (procedures: ProcedureInterface[]) => void\r\n}\r\ninterface ProceduresState {\r\n    emptyPlaceholder: string\r\n    showModal: boolean\r\n    currentProcedureData: ProcedureInterface\r\n}\r\nclass Procedures extends React.Component<ProceduresProps, ProceduresState> {\r\n    constructor(props: ProceduresProps) {\r\n        super(props)\r\n        this.state = {\r\n            emptyPlaceholder: 'No procedures.',\r\n            showModal: false,\r\n            currentProcedureData: {} as ProcedureInterface,\r\n        }\r\n        this.getProcedures()\r\n    }\r\n\r\n    handleSaveAndHideModal(\r\n        status: boolean = false,\r\n        currentProcedureData: ProcedureInterface = {} as ProcedureInterface,\r\n    ) {\r\n        if (this.procedureIsExist(currentProcedureData)) {\r\n            this.props.onUpdateProcedure([currentProcedureData])\r\n        } else {\r\n            this.props.onAddProcedure([currentProcedureData])\r\n        }\r\n        this.setState({\r\n            showModal: status,\r\n            currentProcedureData: {} as ProcedureInterface,\r\n        })\r\n    }\r\n\r\n    handleShowModal(\r\n        status: boolean = false,\r\n        procedure: ProcedureInterface = {} as ProcedureInterface,\r\n    ) {\r\n        if (procedure && Object.keys(procedure).length) {\r\n            this.setState({\r\n                currentProcedureData: Object.assign(\r\n                    this.state.currentProcedureData,\r\n                    procedure,\r\n                ),\r\n            })\r\n        } else {\r\n            this.setState({\r\n                currentProcedureData: {} as ProcedureInterface,\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            showModal: status,\r\n        })\r\n    }\r\n\r\n    handleCloseModal() {\r\n        this.setState({\r\n            showModal: false,\r\n        })\r\n    }\r\n\r\n    handleDeleteProcedure(event: any, procedure: ProcedureInterface) {\r\n        event.stopPropagation()\r\n        this.props.onDeleteProcedure([procedure])\r\n    }\r\n\r\n    getProcedures() {\r\n        //place of request\r\n        this.props.onGetProcedures(ProceduresList)\r\n    }\r\n\r\n    procedureIsExist(checkedProcedure: ProcedureInterface) {\r\n        return this.props.procedures.some(\r\n            (procedure: ProcedureInterface) =>\r\n                procedure.Id === checkedProcedure.Id,\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { emptyPlaceholder, showModal, currentProcedureData } = this.state\r\n        const { procedures } = this.props\r\n\r\n        return (\r\n            <div className={cn.procedures}>\r\n                <TopPanel\r\n                    title={'Procedures'}\r\n                    buttonLabel={'Procedure'}\r\n                    onAction={() => {\r\n                        this.handleShowModal(true)\r\n                    }}\r\n                />\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Patient</th>\r\n                            <th>Description</th>\r\n                            <th>Status</th>\r\n                            <th>Date of Procedure</th>\r\n                            <th>Planned Start Time</th>\r\n                            <th>Estimated End Time</th>\r\n                            <th> </th>\r\n                        </tr>\r\n                    </thead>\r\n                    {procedures && procedures.length ? (\r\n                        <tbody>\r\n                            {procedures.map((procedure, i) => {\r\n                                return (\r\n                                    <tr\r\n                                        key={i}\r\n                                        style={{ cursor: 'pointer' }}\r\n                                        onClick={() => {\r\n                                            this.handleShowModal(true, procedure)\r\n                                        }}>\r\n                                        <td>{procedure.Id}</td>\r\n                                        <td>{procedure.Patient ? procedure.Patient.Name : ''}</td>\r\n                                        <td>{procedure.Description}</td>\r\n                                        <td>{procedure.Status}</td>\r\n                                        <td>{procedure.DateOfProcedure}</td>\r\n                                        <td>{procedure.PlannedStartTime}</td>\r\n                                        <td>{procedure.EstimatedEndTime}</td>\r\n                                        <td className={cn.delete}\r\n                                            onClick={(event) => {\r\n                                                this.handleDeleteProcedure(\r\n                                                    event,\r\n                                                    procedure,\r\n                                                )\r\n                                            }}>\r\n                                            x\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    ) : (\r\n                        <tbody>\r\n                            <tr>\r\n                                <td colSpan={7}>{emptyPlaceholder}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    )}\r\n                </Table>\r\n                {this.state.showModal ? (\r\n                    <ProcedureModal\r\n                        show={showModal}\r\n                        procedureData={currentProcedureData}\r\n                        patients={this.props.patients}\r\n                        closeModal={() => {\r\n                            this.handleCloseModal()\r\n                        }}\r\n                        saveAndHide={(showModal, currentProcedureData) => {\r\n                            this.handleSaveAndHideModal(\r\n                                showModal,\r\n                                currentProcedureData,\r\n                            )\r\n                        }}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (storeGlobal: any) => {\r\n        return {\r\n            procedures: storeGlobal.procedures,\r\n            patients: storeGlobal.patients,\r\n        }\r\n    },\r\n    (dispatch) => ({\r\n        onGetProcedures: (procedures: ProcedureInterface[]) => {\r\n            dispatch({ type: proceduresActions.GET_PROCEDURES, procedures })\r\n        },\r\n        onAddProcedure: (procedures: ProcedureInterface[]) => {\r\n            dispatch({ type: proceduresActions.ADD_PROCEDURE, procedures })\r\n        },\r\n        onUpdateProcedure: (procedures: ProcedureInterface[]) => {\r\n            dispatch({ type: proceduresActions.UPDATE_PROCEDURE, procedures })\r\n        },\r\n        onDeleteProcedure: (procedures: ProcedureInterface[]) => {\r\n            dispatch({ type: proceduresActions.DELETE_PROCEDURE, procedures })\r\n        },\r\n    }),\r\n)(Procedures)\r\n","import RoomInterface from \"../interfaces/RoomInterface\";\r\n\r\nexport const RoomsList:RoomInterface[] = [\r\n    {\r\n        Id: 1,\r\n        Name: 'Procedural',\r\n    },\r\n    {\r\n        Id: 2,\r\n        Name: 'Roentgen',\r\n    },\r\n    {\r\n        Id: 3,\r\n        Name: 'Tomography',\r\n    },\r\n    {\r\n        Id: 4,\r\n        Name: 'Surgery',\r\n    },\r\n];\r\n","import React from 'react'\r\n\r\nimport cn from './rooms.module.css'\r\nimport { RoomsList } from '../../mock/RoomsMock'\r\nimport RoomInterface from '../../interfaces/RoomInterface'\r\nimport { Table } from 'react-bootstrap'\r\nimport TopPanel from '../../shared/top-panel/TopPanel'\r\n\r\ninterface RoomsProps {}\r\ninterface RoomsState {\r\n    rooms: Array<RoomInterface>\r\n    emptyPlaceholder: string\r\n}\r\n\r\nexport default class Rooms extends React.Component<RoomsProps, RoomsState> {\r\n    state: RoomsState = {\r\n        rooms: RoomsList,\r\n        emptyPlaceholder: 'No Rooms.',\r\n    }\r\n    render() {\r\n        const { rooms, emptyPlaceholder } = this.state\r\n\r\n        return (\r\n            <div className={cn.rooms}>\r\n                <TopPanel title={'Rooms'} />\r\n                <Table striped bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Name</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {rooms && rooms.length ? (\r\n                        <tbody>\r\n                            {rooms.map((doctor) => {\r\n                                return (\r\n                                    <tr key={doctor.Id}>\r\n                                        <td>{doctor.Id}</td>\r\n                                        <td>{doctor.Name}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    ) : (\r\n                        <tbody>\r\n                            <tr>\r\n                                <td colSpan={2}>{emptyPlaceholder}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    )}\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport cn from './header.module.css'\r\nimport logo from '../../logo.png'\r\n\r\ninterface propsHeader {}\r\nexport const Header: React.FC<propsHeader> = () => {\r\n    return (\r\n        <div className={cn.header}>\r\n            <div className={cn.logoWrap}>\r\n                <img src={logo} alt='' width={'30'} height={'30'} />\r\n            </div>\r\n            <div className={cn.title}>Procedure Scheduler</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport cn from './footer.module.css'\r\n\r\nexport default class Footer extends React.Component {\r\n    state = {}\r\n\r\n    render() {\r\n        return <div className={cn.footer}>©&nbsp;2019&nbsp;&nbsp;<strong>3Z+</strong></div>\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport cn from './sideMenuItem.module.css'\r\nimport MenuItemInterface from '../../../../interfaces/MenuItemInterface'\r\n\r\ninterface Props {\r\n    item: MenuItemInterface\r\n    className?: string\r\n}\r\n\r\nexport const SideMenuItem: React.FC<Props> = (props) => {\r\n    return (\r\n        <li className={[cn.sideMenuItem, props.className].join(' ')}>\r\n            <NavLink\r\n                to={props.item.LINK}\r\n                className={cn.link}\r\n                activeClassName={cn.linkActive}\r\n                exact>\r\n                {props.item.LABEL}\r\n            </NavLink>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport cn from './dideMenuList.module.css'\r\nimport { MENU } from '../../../../Constants'\r\nimport { SideMenuItem } from '../menu-item/SideMenuItem'\r\nimport MenuItemInterface from '../../../../interfaces/MenuItemInterface'\r\n\r\ninterface Props {}\r\nexport const SideMenuList: React.FC<Props> = () => {\r\n    return (\r\n        <ul className={cn.sideMenuList}>\r\n            {Object.keys(MENU).map((item: string, i) => {\r\n                const menuItem: MenuItemInterface = MENU[item]\r\n                return (\r\n                    <SideMenuItem\r\n                        key={item}\r\n                        item={menuItem}\r\n                        className={cn.item}\r\n                    />\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport cn from './sideMenu.module.css'\r\nimport { SideMenuList } from './components/menu-list/SideMenuList'\r\nimport logo from '../../logo.png'\r\n\r\ninterface propsMenu {}\r\n\r\nexport const SideMenu: React.FC<propsMenu> = () => {\r\n    return (\r\n        <div className={cn.sideMenu}>\r\n            <SideMenuList />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { MENU } from '../../Constants'\r\nimport { NavLink } from 'react-router-dom'\r\nimport MenuItemInterface from '../../interfaces/MenuItemInterface'\r\nimport cn from './dashboard.module.css'\r\n\r\nexport default class Dashboard extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={cn.dashboard}>\r\n                <div className={cn.tiles}>\r\n                    {Object.keys(MENU)\r\n                        .filter((element) => element !== 'HOME')\r\n                        .map((key: any) => {\r\n                            const item: MenuItemInterface = MENU[key]\r\n\r\n                            return (\r\n                                <NavLink key={item.LINK} to={item.LINK}>\r\n                                    <div className={cn.tile}>{item.LABEL}</div>\r\n                                </NavLink>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { HashRouter as Router, Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { patientsActions } from './store-global/reducers/PatientsReducer'\r\n\r\nimport cn from './app.module.css'\r\n\r\nimport Doctors from './pages/doctors/Doctors'\r\nimport Patients from './pages/patients/Patients'\r\nimport Procedures from './pages/procedures/Procedures'\r\nimport Rooms from './pages/rooms/Rooms'\r\nimport { Header } from './shared/header/Header'\r\nimport Footer from './shared/footer/Footer'\r\nimport { SideMenu } from './shared/side-menu/SideMenu'\r\nimport PatientInterface from './interfaces/PatientInterface'\r\nimport { MENU } from './Constants'\r\nimport { PatientsList } from './mock/PatientsMock'\r\nimport Dashboard from './pages/dashboard/Dashboard'\r\n\r\ninterface PropsApp {\r\n    onGetPatients?: (patients: PatientInterface[]) => void\r\n}\r\ninterface StateApp {\r\n    menuIsOpen: boolean\r\n}\r\nclass App extends React.Component<PropsApp, StateApp> {\r\n    constructor(props: PropsApp) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            menuIsOpen: true,\r\n        }\r\n        this.getPatients()\r\n    }\r\n\r\n    handleToggleMenu() {\r\n        this.setState({\r\n            menuIsOpen: !this.state.menuIsOpen,\r\n        })\r\n    }\r\n\r\n    getPatients() {\r\n        PatientsList &&\r\n            this.props.onGetPatients &&\r\n            this.props.onGetPatients(PatientsList)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={cn.app}>\r\n                <Router>\r\n                    <div\r\n                        className={cn.menuButton}\r\n                        onClick={() => {\r\n                            this.handleToggleMenu()\r\n                        }}>\r\n                        <div className={cn.menuButtonItem} />\r\n                        <div className={cn.menuButtonItem} />\r\n                        <div className={cn.menuButtonItem} />\r\n                    </div>\r\n                    <div\r\n                        className={[\r\n                            cn.sideMenuWrap,\r\n                            this.state.menuIsOpen ? '' : cn.closeMenu,\r\n                        ].join(' ')}>\r\n                        <SideMenu />\r\n                    </div>\r\n                    <div className={cn.wrapper}>\r\n                        <Header />\r\n                        <div className={cn.container}>\r\n                            <div className={cn.content}>\r\n                                <Route\r\n                                    exact\r\n                                    path={MENU.HOME.LINK}\r\n                                    component={Dashboard}\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={MENU.DOCTORS.LINK}\r\n                                    component={Doctors}\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={MENU.PATIENTS.LINK}\r\n                                    component={Patients}\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={MENU.PROCEDURES.LINK}\r\n                                    component={Procedures}\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={MENU.ROOMS.LINK}\r\n                                    component={Rooms}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <Footer />\r\n                    </div>\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (storeGlobal: any) => storeGlobal,\r\n    (dispatch) => ({\r\n        onGetPatients: (patients: PatientInterface[]) => {\r\n            dispatch({ type: patientsActions.GET_PATIENTS, patients })\r\n        },\r\n    }),\r\n)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { routerReducer } from 'react-router-redux'\r\nimport { combineReducers } from 'redux'\r\n\r\nimport patientReducer from './reducers/PatientsReducer'\r\nimport procedureReducer from './reducers/ProceduresReducer'\r\n\r\nexport default combineReducers({\r\n    routing: routerReducer,\r\n    patients: patientReducer,\r\n    procedures: procedureReducer,\r\n})\r\n","import { createStore } from 'redux';\r\nimport reducer from './RootReducer';\r\n\r\n// @ts-ignore\r\nexport default createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport store from './store-global/StoreGlobal'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n\r\n    document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__1jSBs\",\"sideMenuWrap\":\"app_sideMenuWrap__2_2IY\",\"closeMenu\":\"app_closeMenu__30NaW\",\"menuButton\":\"app_menuButton__1WIPf\",\"menuButtonItem\":\"app_menuButtonItem__1j6d7\",\"wrapper\":\"app_wrapper__-gidk\",\"container\":\"app_container__TiA8x\",\"content\":\"app_content__313Oq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topPanel\":\"topPanel_topPanel__2g-LZ\",\"title\":\"topPanel_title__3xsPc\",\"panelContentWrap\":\"topPanel_panelContentWrap__1IpPj\",\"buttonWrap\":\"topPanel_buttonWrap__m5rZV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1hJak\",\"logoWrap\":\"header_logoWrap__309td\",\"title\":\"header_title__1xJ58\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideMenuItem\":\"sideMenuItem_sideMenuItem__3o0QQ\",\"link\":\"sideMenuItem_link__1f7Di\",\"linkActive\":\"sideMenuItem_linkActive__2hIlc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"dashboard_dashboard__1SXKq\",\"tiles\":\"dashboard_tiles__3--XR\",\"tile\":\"dashboard_tile__2iheM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table-padding\":\"patients_table-padding__1hWIF\",\"patients\":\"patients_patients__jyP5C\",\"delete-cell\":\"patients_delete-cell__AhGi5\",\"delete\":\"patients_delete__16Y5V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table-padding\":\"procedures_table-padding__YzqT7\",\"procedures\":\"procedures_procedures__1ac5f\",\"delete-cell\":\"procedures_delete-cell__14Tuw\",\"delete\":\"procedures_delete__jECHG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideMenuList\":\"dideMenuList_sideMenuList__YC3Rx\",\"item\":\"dideMenuList_item__IGwMC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table-padding\":\"doctors_table-padding__2oCm4\",\"doctors\":\"doctors_doctors__2itsP\",\"delete-cell\":\"doctors_delete-cell__1eekh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"requiredNotation\":\"patient-modal_requiredNotation__13rgZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"requiredNotation\":\"procedure-modal_requiredNotation__A1pcN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table-padding\":\"rooms_table-padding__3nE4W\",\"rooms\":\"rooms_rooms__V1yz2\",\"delete-cell\":\"rooms_delete-cell__pQPC2\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d9df3cd.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__2TgoP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideMenu\":\"sideMenu_sideMenu__3B7HR\"};"],"sourceRoot":""}